name: Tests
on:
  push:
    branches: master
  pull_request:
    branches: master
jobs:
  unit-testing:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9']
    steps:
      - name: Checkout Repository And Submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set Up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python Version
        run: python -c "import sys; print(sys.version)"
        shell: bash
      - name: Install Pydivsufsort And Other Dependencies
        run: |
          python -m pip install -r requirements.txt
          python -m pip install flake8 codecov pytest
          git submodule init
          git submodule update

          mkdir tempbuild
          cd tempbuild
          cmake -DBUILD_DIVSUFSORT64=ON -DBUILD_EXAMPLES=OFF -DUSE_OPENMP=ON $PLATFORM_OPTION ../libdivsufsort
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build . --config Release
            OUTPATH="tempbuild/examples/Release/divsufsort"
          else
            make
            OUTPATH="tempbuild/lib/libdivsufsort"
          fi

          cd ..

          # copy the two largest files, aka the dll of divsufsort and divsufsort64
          mv $(du $OUTPATH* | sort -nr | head -n2 | cut -f2) pydivsufsort
          rm -rf tempbuild
          python -m pip install .
        shell: bash
      - name: Run Flake8
        run: flake8 .
        shell: bash
      - name: Run Unit Tests
        run: |
          pytest tests
          coverage run -m pytest tests
        shell: bash
  build_wheels:
    needs: unit-testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout Repository And Submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set Up Python
        uses: actions/setup-python@v2
      - name: Install Build
        run: python -m pip install build
        shell: bash
      - name: Build Sdist
        run: |
             if [ "$RUNNER_OS" == "Linux" ]; then
                python -m build --sdist
             fi
        shell: bash
      - name: Install Cibuildwheel
        run: python -m pip install cibuildwheel
        shell: bash
      - name: Build Wheels
        env:
          CIBW_BEFORE_BUILD: bash ./cibw_before_build.sh
          CIBW_SKIP: pp*
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          ls wheelhouse/*
        shell: bash
      - name: upload-builds
        run: |
             python -m pip install twine
             if [ "$RUNNER_OS" == "Linux" ]; then
                # Replace/remove echo
                echo "python -m twine upload --skip-existing dist/*"
             fi
             # Replace/remove echo
             echo "python -m twine upload --skip-existing wheelhouse/*.whl"
